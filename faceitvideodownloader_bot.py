import os
import tempfile
import time

import requests
import telebot
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

import constants
from logger import get_logger

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = os.getenv("API_SERVER")

logger = get_logger(__name__)

logger.info("----- –ü—Ä–æ–≤–µ—Ä–∫–∞ .env -----")
if not BOT_TOKEN:
    logger.critical(constants.TOKEN_ENV_ERROR)
    raise ValueError(constants.TOKEN_ENV_ERROR)
if not API_URL:
    logger.critical(constants.API_SERVER_ERROR)
    raise ValueError(constants.API_SERVER_ERROR)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–∞
driver = None


def setup_bot():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ—Ç–∞"""

    if API_URL:
        telebot.apihelper.API_URL = f"{API_URL}/bot{{0}}/{{1}}"
        telebot.apihelper.FILE_URL = f"{API_URL}/file/bot{{0}}/{{1}}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if not check_api_availability():
            logger.critical("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API —Å–µ—Ä–≤–µ—Ä—É")
            raise ConnectionError("API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.info("- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä -")

    return telebot.TeleBot(BOT_TOKEN)


def check_api_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get(f"{API_URL}/bot{BOT_TOKEN}/getMe", timeout=5)
        return response.status_code == 200
    except Exception:
        return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –∑–∞—Å–Ω–µ–º –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
# –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ API
time.sleep(5)
bot = setup_bot()


def init_driver():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Chrome driver"""
    try:
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –±—Ä–∞—É–∑–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        browser_paths = [
            "/usr/bin/google-chrome-stable",
            "/usr/bin/google-chrome", 
            "/usr/bin/chromium-browser",
            "/usr/bin/chromium"
        ]

        for path in browser_paths:
            if os.path.exists(path):
                chrome_options.binary_location = path
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä: {path}")
                break
        else:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –±—Ä–∞—É–∑–µ—Ä!")
            return None

        driver = webdriver.Chrome(options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

        logger.info("Chrome driver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return driver

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chrome driver: {e}")
        return None


def get_driver():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –µ–≥–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    global driver
    if driver is None:
        driver = init_driver()
    return driver


def is_faceit_link(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ Faceit –≤–∏–¥–µ–æ"""
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not url.startswith(('http://', 'https://')):
        return False
    if 'faceit.com' not in url:
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –ø—É—Ç–∏
    if '/players/' not in url or '/videos/' not in url:
        return False
    return True


def get_video_id(url):
    """–ë—ã—Å—Ç—Ä–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç video_id –∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ Faceit"""
    # –ü—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ '/' –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    return url.split('/')[-1]


def get_mp4_url_from_allstar(video_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ MP4 –≤–∏–¥–µ–æ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã allstar.gg
    """
    driver = get_driver()
    if driver is None:
        logger.error("Chrome driver –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return None

    try:
        allstar_url = f"https://allstar.gg/iframe?clip={video_id}"
        logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {allstar_url}")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        driver.get(allstar_url)

        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        wait = WebDriverWait(driver, 10)
        video_elements = wait.until(
            EC.presence_of_all_elements_located((By.TAG_NAME, "video"))
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ video —ç–ª–µ–º–µ–Ω—Ç—ã
        for video in video_elements:
            src = video.get_attribute("src")
            if src and src.endswith('.mp4'):
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ MP4 —Å—Å—ã–ª–∫–∞ –≤ video tag: {src}")
                return src

        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ MP4 —Å—Å—ã–ª–∫–∏: {str(e)}",
                     exc_info=True)
        return None


def get_title_from_faceit(url):
    driver = get_driver()
    if driver is None:
        logger.error("Chrome driver –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return None

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        driver.get(url)

        # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∏ title (–±—ã—Å—Ç—Ä–æ)
        WebDriverWait(driver, 10).until(
            lambda d: d.execute_script("return document.readyState") == "complete" or d.title
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = driver.title
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω: {title}")
        return title
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏: {str(e)}",
                     exc_info=True)
        return None


def safe_delete_file(filename):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        if filename and os.path.exists(filename):
            os.unlink(filename)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {filename}")
            return True
    except Exception as e:
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename}: {str(e)}")
    return False


def stream_video_properly(message, mp4_url, faceit_url, title):
    """
    –ù–∞—Å—Ç–æ—è—â–∞—è –ø–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAM
    """
    try:
        bot.send_chat_action(message.chat.id, 'upload_video')

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ (–Ω–µ –≤ RAM)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
            temp_filename = temp_file.name

            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø—Ä—è–º–æ –≤ —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }

            response = requests.get(mp4_url,
                                    headers=headers,
                                    stream=True,
                                    timeout=60)
            response.raise_for_status()

            # –ü–∏—à–µ–º –ø—Ä—è–º–æ –≤ —Ñ–∞–π–ª —á–∞–Ω–∫–∞–º–∏
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    temp_file.write(chunk)

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            temp_file.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
            with open(temp_filename, 'rb') as video_file:
                bot.send_video(
                    message.chat.id,
                    video_file,
                    caption=f"üé• <b>{title}</b> üéÆ\n <code>{faceit_url}</code>",
                    timeout=120,
                    parse_mode='HTML',
                    supports_streaming=True
                )
            logger.info(f"–í–∏–¥–µ–æ {mp4_url} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        safe_delete_file(temp_filename)

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        safe_delete_file(temp_filename)
        return False


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
                     constants.WELCOME_TEXT,
                     parse_mode='Markdown')


@bot.message_handler(content_types=['text'])
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Å—ã–ª–æ–∫)"""
    try:
        url = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É Faceit
        if not is_faceit_link(url):
            bot.send_message(
                message.chat.id,
                constants.NOT_FACEIT_URL_ERROR,
                parse_mode='Markdown'
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = bot.send_message(
            message.chat.id,
            constants.START_PROCESS,
            parse_mode='Markdown'
        )
        title = get_title_from_faceit(url)
        video_id = get_video_id(url)
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å id {video_id} "
                    f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.username}")
        # –ü–æ–ª—É—á–∞–µ–º MP4 —Å—Å—ã–ª–∫—É —Å allstar.gg
        mp4_url = get_mp4_url_from_allstar(video_id)
        if not mp4_url:
            bot.send_message(
                message.chat.id,
                constants.MP4_NOT_FOUND_ERROR,
                parse_mode='Markdown'
            )
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        bot.edit_message_text(
            constants.VIDEO_PROCESS,
            message.chat.id,
            processing_msg.message_id,
            parse_mode='Markdown'
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        success = stream_video_properly(message, mp4_url, url, title)

        if success:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            bot.delete_message(message.chat.id, processing_msg.message_id)
        else:
            bot.edit_message_text(
                constants.DOWNLOAD_ERROR,
                message.chat.id,
                processing_msg.message_id,
                parse_mode='Markdown'
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                     exc_info=True)
        bot.send_message(
            message.chat.id,
            constants.PROCESS_ERROR,
            parse_mode='Markdown'
        )


def main():
    try:
        logger.info("----- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω -----")
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logger.info("----- –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω -----")


if __name__ == "__main__":
    main()
